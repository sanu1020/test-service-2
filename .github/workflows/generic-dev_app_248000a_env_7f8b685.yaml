name: generic-dev_app_248000a_env_7f8b685 Pipeline (Skyu Generated)
'on':
  push:
    branches:
      - main
    paths-ignore:
      - .github/workflows/**
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_438f7069-9c0d-4c81-a0b3-cffb7c6c74e8
env:
  ENCODED_PIPELINE_SECRET: ${{secrets.TESTSERVICE2_GENERICDEV_APP_248000A_ENV_7F8B685}}
  COMMIT_ID: ${{github.event.client_payload.commitId || github.sha || github.run_id}}
  role-to-assume: '{{.RoleARN}}'
  aws-region: '{{.Region}}'
  terraform_wrapper: 'false'
  DEPLOY_STEP_SHOULD_DEPLOY: 'true'
jobs:
  code-scan:
    name: Code Scan
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: 'Run :: Checkout repository for Code Scan'
        uses: actions/checkout@v4
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Install Semgrep, Scan and Print'
        run: >-
          docker run -i -v "${PWD}:/src" semgrep/semgrep semgrep /src --json
          --quiet > semgrep_results.json
      - name: 'Run :: Upload Code Scan Report'
        run: |2-

                  SARIF_FILE="semgrep_results.json"
                  if [ -n "$SARIF_FILE" ]; then
                    cat "$SARIF_FILE" > ${{ env.COMMIT_ID }}-code-scan-report.sarif
                    echo "Uploading CodeQL Results to S3 :: ${{ env.COMMIT_ID }}-code-scan-report.sarif"
           
                    response=$(curl -X POST -F 'file=@${{ env.COMMIT_ID }}-code-scan-report.sarif' -F 'provider=aws' -F 'resourceType=code-scan-report' -F 'cloudStoragePath=/${{ env.PIPELINE_APPLICATION_ID }}/code-scan-reports/'  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-auth-by: sa' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-resource-id: ${{ env.PIPELINE_APPLICATION_ID }}' -H 'Content-Type: multipart/form-data'  "${{ env.S3_UPLOAD_ENDPOINT }}")

                    if echo "$response" | grep -q '"success":true'; then
                      echo "SUCCESS :: $response"
                    else
                      echo "FAILED :: $response"
                    fi

                  else
                      echo "SARIF file not found."
                  fi
  _status-pending:
    name: _status Pending
    permissions: write-all
    env:
      CONTEXT_JSON: ${{ toJson(github) }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Started
        run: |2-

              context=$(echo "$CONTEXT_JSON" | jq -c . | base64)
              response=$(curl -X PUT -d "runId=${{ github.run_id }}&context=$context"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.PIPELINE_SERVICE_EP }}/${{ env.PIPELINE_ID }}/PENDING?releaseId=${{ github.event.client_payload.releaseData.releaseId }}")
              if echo "$response" | grep -q '"success":true'; then
                echo "SUCCESS :: $response"
              else
                echo "FAILED :: $response"
              fi
              
  _release-info:
    name: _release Info
    permissions: write-all
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload.releaseData }}
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Release
        run: |2-

              echo "Pipeline Release Information"
              echo "////////////////////////////"
              echo "releaseId         : ${{ github.event.client_payload.releaseData.releaseId }}"
              echo "pipelineId        : ${{ github.event.client_payload.releaseData.pipelineId }}"
              echo "pipelineRunId     : ${{ github.run_id }}"
              echo "applicationId     : ${{ github.event.client_payload.releaseData.appId }}"
              echo "versionId         : ${{ env.DEPLOYMENT_APP_VERSION_ID }}"
              echo "credentialId      : ${{ env.PIPELINE_CREDENTIAL_ID }}"
              echo "userName          : ${{ github.repository_owner }}"
              echo "repositoryName    : ${{ github.repository }}"
              echo "commitId          : ${{ env.COMMIT_ID }}"
              echo "commitHash        : ${{ env.COMMIT_ID }}"
              echo "commitAvatar      : https://github.com/${{ github.event.head_commit.author.name }}.png"
              echo "commitTime        : ${{ github.event.head_commit.timestamp }}"
              echo "commitMessage     : ${{ github.event.client_payload.commitMessage }}"
              echo "commitUser        : ${{ github.event.head_commit.author.name }}"
              echo "shouldDeploy      : ${{ env.DEPLOY_STEP_SHOULD_DEPLOY }}"
              echo "containerName     : ${{ env.DEPLOYMENT_CONTAINER_NAME }}"
              echo "imageRegistryURL  : ${{ env.IMAGE_NAME }}",
              # Storing Release Information for Deployment
              response=$(curl -X POST -d "releaseId=${{ github.event.client_payload.releaseData.releaseId }}&pipelineId=${{ github.event.client_payload.releaseData.pipelineId }}&pipelineRunId=${{ github.run_id }}&versionId=${{ env.DEPLOYMENT_APP_VERSION_ID }}&applicationId=${{ github.event.client_payload.releaseData.appId }}&credentialId=${{ env.PIPELINE_CREDENTIAL_ID }}&userName=${{ github.repository_owner }}&repositoryName=${{ github.repository }}&commitId=${{ env.COMMIT_ID }}&commitData[commitHash]=${{ env.COMMIT_ID }}&commitData[commitAvatar]=https://github.com/${{ github.event.head_commit.author.name }}.png&commitData[commitTime]=${{ github.event.head_commit.timestamp }}&commitData[commitMessage]=${{ github.event.client_payload.commitMessage }}&commitData[commitUser]=${{ github.event.head_commit.author.name }}&shouldDeploy=${{ env.DEPLOY_STEP_SHOULD_DEPLOY }}&containerName=${{ env.DEPLOYMENT_CONTAINER_NAME }}&imageRegistryURL=${{ env.IMAGE_NAME }}"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.PIPELINE_SERVICE_EP }}/release/pipeline")
              if echo "$response" | grep -q '"success":true'; then
                echo "SUCCESS :: $response"
              else
                echo "FAILED :: $response"
              fi
              
  apply:
    name: Apply
    permissions: write-all
    env:
      ORGANIZATION_ID: ${{ secrets.ORGANIZATION_ID }}
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      CREDENTIAL_ID: ${{ secrets.CREDENTIAL_ID }}
      SERVICE_ACCOUNT_TOKEN: ${{ secrets.SERVICE_ACCOUNT_TOKEN }}
    runs-on: ubuntu-latest
    needs:
      - _status-pending
    steps:
      - name: Start
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Run :: Checkout Specific Commit'
        if: ${{ github.event.client_payload.commitId != null }}
        run: |2-

              git fetch --all
              git checkout ${{ github.event.client_payload.commitId }} || true
              
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Launch Template Starts Status [LAUNCH_TEMPLATE] [STARTED]
        run: >-
          curl --location --request POST
          '{{.Api}}/infrastructure/{{.TemplateID}}?stepName=Launch-Template&status=Started'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": {}}'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
      - name: Create Credentials File
        run: >-
          mkdir $HOME/.aws/ && touch $HOME/.aws/credentials && echo "[default]"
          > $HOME/.aws/credentials && echo
          "aws_access_key_id=${{env.AWS_ACCESS_KEY_ID}}" >>
          $HOME/.aws/credentials && echo
          "aws_secret_access_key=${{env.AWS_SECRET_ACCESS_KEY}}" >>
          $HOME/.aws/credentials && echo
          "aws_session_token=${{env.AWS_SESSION_TOKEN}}" >>
          $HOME/.aws/credentials
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Download Terragrunt
        run: >-
          wget
          https://github.com/gruntwork-io/terragrunt/releases/download/v0.50.6/terragrunt_linux_amd64
          && mv terragrunt_linux_amd64 terragrunt && chmod u+x terragrunt && mv
          terragrunt /usr/local/bin/terragrunt
      - name: Terragrunt Version Check
        run: terragrunt version
      - name: Push Terragrunt Status [INIT] [IN_PROGRESS]
        run: >-
          curl --location --request POST
          '{{.Api}}/infrastructure/{{.TemplateID}}?stepName=Terragrunt-Init&status=InProgress'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": {}}'
      - name: Terragrunt Init
        run: terragrunt init --terragrunt-non-interactive
      - name: Push Terragrunt Status [INIT] [FAILED]
        if: failure()
        run: >-
          curl --location --request POST
          '{{.Api}}/infrastructure/{{.TemplateID}}?stepName=Terragrunt-Init&status=Failed'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": {}}'
      - name: Push Terragrunt Status [INIT] [SUCCESS]
        run: >-
          curl --location --request POST
          '{{.Api}}/infrastructure/{{.TemplateID}}?stepName=Terragrunt-Init&status=Success'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": {}}'
      - name: '[SLEEP]'
        run: sleep 3
      - name: Push Terragrunt Status [PLAN] [IN_PROGRESS]
        run: >-
          curl --location --request POST
          '{{.Api}}/infrastructure/{{.TemplateID}}?stepName=Terragrunt-Plan&status=InProgress'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": {}}'
      - name: Terragrunt Plan
        run: terragrunt plan --terragrunt-non-interactive
      - name: Push Terragrunt Status [PLAN] [FAILED]
        if: failure()
        run: >-
          curl --location --request POST
          '{{.Api}}/infrastructure/{{.TemplateID}}?stepName=Terragrunt-Plan&status=Failed'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": {}}'
      - name: Push Terragrunt Status [PLAN] [SUCCESS]
        run: >-
          curl --location --request POST
          '{{.Api}}/infrastructure/{{.TemplateID}}?stepName=Terragrunt-Plan&status=Success'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": {}}'
      - name: '[SLEEP]'
        run: sleep 3
      - name: Push Terragrunt Status [APPLY] [IN_PROGRESS]
        run: >-
          curl --location --request POST
          '{{.Api}}/infrastructure/{{.TemplateID}}?stepName=Terragrunt-Apply&status=InProgress'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": {}}'
      - name: Terragrunt Apply
        run: terragrunt apply --terragrunt-non-interactive -auto-approve
      - name: Push Terragrunt Status [APPLY] [FAILED]
        if: failure()
        run: >-
          curl --location --request POST
          '{{.Api}}/infrastructure/{{.TemplateID}}?stepName=Terragrunt-Apply&status=Failed'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": {}}'
      - name: Push Terragrunt Status [APPLY] [SUCCESS]
        run: >-
          curl --location --request POST
          '{{.Api}}/infrastructure/{{.TemplateID}}?stepName=Terragrunt-Apply&status=Success'
          --header "x-auth-by: sa" --header "x-organization-id:
          $ORGANIZATION_ID" --header "x-project-id: $PROJECT_ID" --header
          "x-credential-id: $CREDENTIAL_ID" --header "Authorization: Bearer
          $SERVICE_ACCOUNT_TOKEN" --data '{"terragruntoutputs": $(terragrunt
          output --json)}'
  _status-success:
    name: _status Success
    permissions: write-all
    env:
      CONTEXT_JSON: ${{ toJson(github) }}
    runs-on: ubuntu-latest
    needs:
      - code-scan
      - apply
      - deploy
    if: ${{ !(failure() || cancelled()) }}
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Success
        run: |2-

              context=$(echo "$CONTEXT_JSON" | jq -c . | base64)
              response=$(curl -X PUT -d "runId=${{ github.run_id }}&context=$context"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.PIPELINE_SERVICE_EP }}/${{ env.PIPELINE_ID }}/SUCCESS?releaseId=${{ github.event.client_payload.releaseData.releaseId }}")
              
  _status-failed:
    name: _status Failed
    permissions: write-all
    env:
      CONTEXT_JSON: ${{ toJson(github) }}
    runs-on: ubuntu-latest
    needs:
      - code-scan
      - apply
      - deploy
    if: ${{ failure() || cancelled() }}
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Failed
        run: |2-

              context=$(echo "$CONTEXT_JSON" | jq -c . | base64)
              response=$(curl -X PUT -d "runId=${{ github.run_id }}&context=$context"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.PIPELINE_SERVICE_EP }}/${{ env.PIPELINE_ID }}/FAILED?releaseId=${{ github.event.client_payload.releaseData.releaseId }}")
              
  deploy:
    name: Deploy
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - first-job
    if: github.event.client_payload.releaseData == null
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Deploy and Notify Resource Service'
        run: |2-
              
              response=$(curl -X PATCH -d "imageRegistryURL=${{ env.IMAGE_NAME }}&appVersionId=${{ env.DEPLOYMENT_APP_VERSION_ID }}&tag=${{ env.COMMIT_ID }}&containerName=${{ env.DEPLOYMENT_CONTAINER_NAME }}&shouldDeploy=${{env.DEPLOY_STEP_SHOULD_DEPLOY}}&pipelineRunId=${{ github.run_id }}&commitDetails[commitHash]=${{ github.sha }}&commitDetails[commitAvatar]=https://github.com/${{ github.event.head_commit.author.name }}.png&commitDetails[commitTime]=${{ github.event.head_commit.timestamp }}&commitDetails[commitMessage]=${{ github.event.head_commit.message || github.event.client_payload.commitMessage }}&commitDetails[commitUser]=${{ github.event.head_commit.author.name }}"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-application-id: ${{ env.PIPELINE_APPLICATION_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-resource-id: ${{ env.PIPELINE_APPLICATION_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.DEPLOYMENT_ENDPOINT }}")
              
              status_code=$?

              if [ $status_code -eq 0 ]; then
                if echo "$response" | grep -q '"success":true'; then
                  echo "SUCCESS :: $response"
                else
                  echo "FAILED :: $response"
                  exit 1
                fi
              else
                echo "Failed to deploy. HTTP status code: $status_code"
                exit 1
              fi
            
